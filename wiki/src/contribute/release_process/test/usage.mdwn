[[!meta title="Running the automated test suite"]]

[[!toc levels=2]]

Basic usage
===========

Use the `run_test_suite` script found in the Tails source root to run
all automated Cucumber test features. See the [[setup
documentation|test/setup]] in case you don't have a testing
environment yet. Note that the full Tails source tree must be readable
by the user running the test suite.

It's important to note that some features only depend on the Tails
sources, and some on the actual product of the sources, i.e. a Tails
ISO image. These features are tagged `@source` and `@product`,
respectively. The arguments passed to `run_test_suite` may only affect
one of these types of features and not the other.

A typical example run of a few `@product` features could be:

    ./run_test_suite --view --capture test-0.17.webm \
        --iso path/to/tails.iso \
        features/apt.feature features/erase_memory.feature

which will test only the `apt` and `erase_memory` features (if
no feature paths are given, all features in `features/cucumber` will
be tested) of the given ISO image `tails.iso` while showing the test
session in a VNC viewer (`--view`) and also capturing it into a video
called `test-0.17.web` (`--capture`). Similarly, to test a `@source`
feature, we'd simply run something like:

    ./run_test_suite features/build.feature

For full instructions, see its `--help`.

Note: since the test suite itself uses `virt-viewer` to interact with
the Tails guest you cannot use it as that will steal the session from
the test suite, leaving it with a blank screen.

Configuration
=============

The test suite can be configured in the following ways:

1. `run_test_suite` parameters, which takes precedence over

2. the local configuration file `features/config/local.yml`, which
takes precedence over

2. the local configuration files in `features/config/*.d` (with
   internal precedence according to lexical order), which takes
   precedence over

4. the default configuration file `features/config/defaults.yml`.

However, some values are treated as secrets and have no
defaults. These secrets are generally information about online sevices
to be used in certain features, like host, port and credentials --
stuff we don't want to make public. These must be set explicitly in
order for those features to run.

A Git repository, shared among a bunch of core Tails contributors,
includes _some_ of the needed secrets (more specifically, those that
can be use by concurrent test suite runs):

	git clone tails@git.tails.boum.org:test-suite-shared-secrets \
	   features/config/shared-secrets.d

## Non-secret configuration

Here's a list of all non-secret key-value pairs that can be supported
by the local configuration file:

* `DEBUG`: Boolean value. If set to `true`, various debugging info
  will be printed. Defaults to `false`.

* `MAX_NEW_TOR_CIRCUIT_RETRIES`: Integer. Upon failure, some test steps may be
  run again after requesting that connections are made using new Tor circuits. This
  configuration variable limits how many times forcing a circuit will be
  attempted.  Defaults to `5`.

* `PAUSE_ON_FAIL`: Boolean value. If set to `true`, the test suite run
  is suspended on failure until ENTER is pressed. This is useful for
  investigating the state of the VM guest to see exactly why a test
  failed. Defaults to `false`.

* `SIKULI_RETRY_FINDFAILED`: Boolean value. If set to `true`, print a
  warning whenever Sikuli fails to find an image and allow *one* retry
  after pressing ENTER. This is useful for updating outdated images,
  or when extracting new images. Defaults to `false`.

* `TEMP_DIR`: String value. Directory where various temporary files
  are written during a test, e.g. VM snapshots and memory dumps,
  failure screenshots, pcap files and disk images. Defaults to
  `"/tmp/TailsToaster"`.

## "Secret" configuration

This section describes the formats for all secret configurations that
must be configured in the local configuration file for certain
features or scenarios to work. If any of these are omitted, parts of
the test suite will fail.

### Tor pluggable transports

The format is:

    Tor:
      Transports:
        $TYPE:
          - ipv4_address: "1.2.3.4"
            ipv4_port: 443
            fingerprint: "01234567890abcdef01234567890abcdef012345"
            extra:
          - ipv4_address: "5.6.7.8"
          [...]
        $ANOTHER_TYPE:
          - ipv4_address: "1.2.3.4"
          [...]

where the type `$TYPE` (and `$ANOTHER_TYPE`) should be something like
`Obfs4` or `Bridge` (the first type) or whatever Tor calls them. Both
`fingerprint` and `extra` are optional and can be left empty (or
skipped completely), but e.g. `extra` is necessary for `Obfs4` type
bridges, for the `cert=... iat-mode=...` stuff, and the same for
`Scramblesuite`'s `password=...`.

This setting is required for `tor_bridges.feature` (requires types
`Bridge`, `Obfs2`, `Obfs3` and `Obfs4`) and `time_syncing.feature`
(requires type `Bridge` only).

### Pidgin

These secrets are required for some scenarios in
`pidgin.feature`. Here's an example which explains the format:

    Pidgin:
      Accounts:
        XMPP:
          Tails_account:
            username: "test"
            domain: "jabber.org"
            password: "opensesame"
          Friend_account:
            username: "friend"
            domain: "jabber.org"
            password: "trustno1"
            otr_key: |
              (privkeys
               (account
              (name friend)
              (protocol xmpp)
              (private-key
               (dsa
              [...]

Note that the fields used in the above example show the *mandatory*
fields.

The XMPP account described by `Tails_account` (to be used in Tails'
Pidgin) and `Friend_account` (run via a bot from the tester host) must
be subscribed to each other but to no other XMPP account. Also, for the
`Friend_account`, it's important that the `otr_key`'s `name` field is
the same as `username`, and that the `protocol` field is `xmpp`.

If a "Connect Server" is needed for any of the accounts, it can be set
in the *optional* `connect_server` field.

In case the `Tails_account`'s conference server doesn't allow creating
arbitrary chat rooms, a specific one that is known to work can be set
in the *optional* `chat_room` field. It should still be a room with a
strange name that is highly likely to always be empty; otherwise the
test will fail.

XMPP services known to work well both for `Tails_account` and
`Friend_account` are:

* riseup.net (use `connect_server: xmpp.riseup.net`)
* jabber.org (doesn't allow creating arbitrary chatrooms, so setting
  `chat_room` may be needed)
* jabber.ccc.de

### SSH

These settings are required for `ssh.feature`.  The format is:

    $TYPE:
      hostname: 1.2.3.4
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIJKAIBAAKCAgEAwJJK8LFxTWVnKUeOBdw+w69fDMmJugJmCx1TF/QS7kPfVPRl
        lz3hNOpdgZ0BkvC2Fd+mHAUKDWU5SHfCtYl2XyUkJ0p00844rphX+Bl0kVM7ISXt
        [...]
        -----END RSA PRIVATE KEY-----
      public_key: "ssh-rsa AAAAB3NzaC1yc2EA..."
      port: 22
      username: "someuser"

where `$TYPE` is `SSH` or `SFTP`. Secrets must be specified for both `SSH` and
`SFTP`.  If `port` is not specified, `22`will be used.

The SSH test expects the remote system to have a default `bash` shell prompt.
